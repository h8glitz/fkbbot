from aiogram import types
import datetime
import logging
import asyncio
from database import Database
from dispatcher import bot

db = Database('film_bot.db')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notified_users = {}

# –°–ª–æ–≤–∞—Ä—å —Å –æ—á–∫–∞–º–∏ –∑–∞ –∫–∞—Ä—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π
CARD_POINTS = {
    'Base': 250,
    'Medium': 350,
    'Episode': 500,
    'Muth': 1500,
    'Legendary': 3000,
    'Limited': 10000
}

async def check_and_notify_users():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º Film Pass
            users_with_pass = db.get_all_users_with_pass()
            logging.info(f"Found {len(users_with_pass)} users with active pass")
            
            current_time = datetime.datetime.now()
            
            for user_id in users_with_pass:
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    if user_id[0] in notified_users:
                        continue
                        
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    state = db.get_state(user_id[0])
                    if not state or not state[0]:  # state[0] - —ç—Ç–æ state_card
                        logging.info(f"No state_card for user {user_id[0]}")
                        continue
                    
                    try:
                        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                        last_card_time = datetime.datetime.strptime(state[0], '%H:%M:%S')
                    except ValueError:
                        try:
                            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ timestamp
                            timestamp = int(state[0])
                            last_card_time = datetime.datetime.fromtimestamp(timestamp)
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                            new_time_str = last_card_time.strftime('%H:%M:%S')
                            db.update_state(user_id[0], "state_card", new_time_str)
                            logging.info(f"Converted old timestamp {timestamp} to new format {new_time_str}")
                        except (ValueError, TypeError) as e:
                            logging.error(f"Error converting time for user {user_id[0]}: {e}")
                            continue
                    
                    last_card_time = last_card_time.replace(
                        year=current_time.year,
                        month=current_time.month,
                        day=current_time.day
                    )
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã, 
                    # –∑–Ω–∞—á–∏—Ç –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞ –≤—á–µ—Ä–∞
                    if current_time.time() < last_card_time.time():
                        last_card_time = last_card_time - datetime.timedelta(days=1)
                    
                    time_passed = (current_time - last_card_time).total_seconds()
                    
                    logging.info(f"User {user_id[0]}:")
                    logging.info(f"  Last card time: {last_card_time.strftime('%H:%M:%S')}")
                    logging.info(f"  Current time: {current_time.strftime('%H:%M:%S')}")
                    logging.info(f"  Time passed: {int(time_passed)} seconds")
                    
                    # 2 —á–∞—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—Å—Å–æ–º (7200 —Å–µ–∫—É–Ω–¥)
                    if time_passed >= 7200:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await bot.send_message(
                            user_id[0],
                            "üéâ –í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É!"
                        )
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫–æ–º—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        notified_users[user_id[0]] = True
                        logging.info(f"Sent notification to user {user_id[0]}")
                except Exception as e:
                    logging.error(f"Error processing user {user_id[0]}: {e}")
                    continue
                    
        except Exception as e:
            logging.error(f"Error in check_and_notify_users: {e}")
            
        await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def start_notification_checker():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    asyncio.create_task(check_and_notify_users())
    logging.info("Notification checker started")

async def get_card(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã
    if message.from_user.id in notified_users:
        del notified_users[message.from_user.id]
        
    user = db.get_user(message.from_user.id)
    if not user:
        logging.error(f"User {message.from_user.id} not found")
        db.add_user(message.from_user.id)
        user = db.get_user(message.from_user.id)
        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    if db.is_banned(message.from_user.id):
        await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç—ã")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempts = user[8]
    if attempts == 0:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
        current_time = datetime.datetime.now()
        state = db.get_state(message.from_user.id)
        
        # –ï—Å–ª–∏ state –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç state_card, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if not state or not state[0]:
            current_time_str = current_time.strftime('%H:%M:%S')
            db.update_state(message.from_user.id, "state_card", current_time_str)
            logging.info(f"Created new state for user {message.from_user.id}")
            state = db.get_state(message.from_user.id)
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            last_card_time = datetime.datetime.strptime(state[0], '%H:%M:%S')
        except ValueError:
            try:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ timestamp
                timestamp = int(state[0])
                last_card_time = datetime.datetime.fromtimestamp(timestamp)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                new_time_str = last_card_time.strftime('%H:%M:%S')
                db.update_state(message.from_user.id, "state_card", new_time_str)
                logging.info(f"Converted old timestamp {timestamp} to new format {new_time_str}")
            except (ValueError, TypeError) as e:
                # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
                last_card_time = current_time
                new_time_str = current_time.strftime('%H:%M:%S')
                db.update_state(message.from_user.id, "state_card", new_time_str)
                logging.error(f"Error converting time, using current time: {e}")
        
        last_card_time = last_card_time.replace(
            year=current_time.year,
            month=current_time.month,
            day=current_time.day
        )
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã, 
        # –∑–Ω–∞—á–∏—Ç –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞ –≤—á–µ—Ä–∞
        if current_time.time() < last_card_time.time():
            last_card_time = last_card_time - datetime.timedelta(days=1)
        
        time_diff = (current_time - last_card_time).total_seconds()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è pass
        has_pass = db.has_active_pass(message.from_user.id)
        wait_time = 7200 if has_pass else 14400  # 2 —á–∞—Å–∞ —Å pass, 4 —á–∞—Å–∞ –±–µ–∑ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        
        if time_diff < wait_time:
            remaining_time = wait_time - time_diff
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–∞—Å—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏
            if has_pass:
                next_time = (last_card_time + datetime.timedelta(seconds=wait_time)).strftime('%H:%M:%S')
                await message.answer(
                    f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {int(remaining_time/3600)} —á. {int((remaining_time%3600)/60)} –º–∏–Ω. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π\n"
                    f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ {next_time}"
                )
            else:
                await message.answer(
                    f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {int(remaining_time/3600)} —á. {int((remaining_time%3600)/60)} –º–∏–Ω. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π"
                )
            return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏, —É–º–µ–Ω—å—à–∞–µ–º –∏—Ö –Ω–∞ 1
    if attempts > 0:
        db.update_attempts(message.from_user.id, attempts - 1)
        logging.info(f"User {message.from_user.id} used one attempt. Remaining: {attempts - 1}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
    card = db.get_random_card()
    if not card:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—á–∫–∏ –∑–∞ –∫–∞—Ä—Ç—É
    points = CARD_POINTS.get(card[4], 0)  # card[4] - —ç—Ç–æ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    logging.info(f"Adding card {card[0]} to user {message.from_user.id}")
    if not db.add_card_to_user(message.from_user.id, card[0]):
        logging.error(f"Failed to add card {card[0]} to user {message.from_user.id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∞—Å—å
    updated_user = db.get_user(message.from_user.id)
    logging.info(f"User data after adding card: {updated_user}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_points(message.from_user.id, points, points)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ state
    current_time = datetime.datetime.now().strftime('%H:%M:%S')
    db.update_state(message.from_user.id, "state_card", current_time)
    logging.info(f"Updated state_card for user {message.from_user.id} to {current_time}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ
    card_info = (
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç—É:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {card[1]}\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {card[4]}\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {points}\n"
        f"{'üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è' if card[3] else 'üîì –û–±—ã—á–Ω–∞—è'}"
    )
    
    if attempts > 0:
        card_info += f"\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts - 1}"
    
    await message.answer_photo(
        photo=card[2],
        caption=card_info
    ) 