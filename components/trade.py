from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import logging
from database import Database
from components.states import TradeStates

db = Database('film_bot.db')

async def show_card_for_trade(message: types.Message, user_id: int, current_index: int, for_response: bool = False):
    """–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞"""
    cards = db.get_user_cards(user_id)
    if not cards:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –æ–±–º–µ–Ω–∞")
        return None

    card = cards[current_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
    card_info = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {card[1]}\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {card[4]}\n"
        f"{'üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è' if card[3] else 'üîì –û–±—ã—á–Ω–∞—è'}\n\n"
        f"{current_index + 1}/{len(cards)}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    keyboard = get_trade_keyboard(current_index, len(cards), card[0], for_response)

    try:
        await message.edit_media(
            types.InputMediaPhoto(
                media=card[2],
                caption=card_info
            ),
            reply_markup=keyboard
        )
    except Exception as e:
        try:
            await message.answer_photo(
                photo=card[2],
                caption=card_info,
                reply_markup=keyboard
            )
        except Exception as e:
            logging.error(f"Error showing card for trade: {e}")
            return None
    
    return cards

def get_trade_keyboard(current_index: int, total_cards: int, card_id: int, for_response: bool = False):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç –ø—Ä–∏ –æ–±–º–µ–Ω–µ"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="trade_prev"),
            InlineKeyboardButton(text=f"{current_index + 1}/{total_cards}", callback_data="trade_info"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data="trade_next")
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞
    action = "respond_select" if for_response else "trade_select"
    keyboard.append([
        InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É", callback_data=f"{action}_{card_id}")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_trade")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def start_trade(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–º–µ–Ω–∞"""
    await state.set_state(TradeStates.selecting_card)
    await state.update_data(current_index=0)
    
    cards = await show_card_for_trade(callback.message, callback.from_user.id, 0)
    if not cards:
        await state.clear()
        return

async def handle_trade_navigation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–∞–º –ø—Ä–∏ –æ–±–º–µ–Ω–µ"""
    current_state = await state.get_state()
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ª–∏ —ç—Ç–æ (–≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã)
    for_response = current_state == TradeStates.selecting_response_card
    
    if callback.data == "trade_prev":
        cards = db.get_user_cards(callback.from_user.id)
        current_index = len(cards) - 1 if current_index == 0 else current_index - 1
    elif callback.data == "trade_next":
        cards = db.get_user_cards(callback.from_user.id)
        current_index = 0 if current_index == len(cards) - 1 else current_index + 1
    elif callback.data == "trade_info":
        await callback.answer()
        return
    
    await state.update_data(current_index=current_index)
    await show_card_for_trade(callback.message, callback.from_user.id, current_index, for_response)
    await callback.answer()

async def handle_card_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞"""
    card_id = int(callback.data.split('_')[2])
    card = db.get_card(card_id)
    if not card:
        await callback.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await state.update_data(offered_card_id=card_id)
    await state.set_state(TradeStates.waiting_for_username)
    
    card_info = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {card[1]}\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {card[4]}\n"
        f"{'üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è' if card[3] else 'üîì –û–±—ã—á–Ω–∞—è'}"
    )
    
    await callback.message.answer_photo(
        photo=card[2],
        caption=f"{card_info}\n\n–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–º–µ–Ω–∞:"
    )

async def handle_username_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–º–µ–Ω–∞"""
    username = message.text.lstrip('@')
    target_user = db.get_user_by_username(username)
    
    if not target_user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if target_user[0] == message.from_user.id:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å—Å—è –∫–∞—Ä—Ç–∞–º–∏ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")
        return
    
    data = await state.get_data()
    offered_card = db.get_card(data['offered_card_id'])
    
    await state.update_data(target_user_id=target_user[0])
    await state.set_state(TradeStates.waiting_for_response)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_trade_{data['offered_card_id']}_{message.from_user.id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_trade_{data['offered_card_id']}_{message.from_user.id}")
        ]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
    trade_message = (
        f"üì® –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞\n"
        f"–û—Ç: @{message.from_user.username or message.from_user.id}\n\n"
        f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–∞—Ä—Ç—É:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {offered_card[1]}\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {offered_card[4]}\n"
        f"{'üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è' if offered_card[3] else 'üîì –û–±—ã—á–Ω–∞—è'}"
    )
    
    await message.bot.send_photo(
        chat_id=target_user[0],
        photo=offered_card[2],
        caption=trade_message,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    
    await message.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

async def handle_trade_response(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞"""
    try:
        parts = callback.data.split('_')
        action = parts[1]
        second_user_id = int(parts[2])
        card_id = int(parts[3]) if len(parts) > 3 else None
        
        logging.info(f"=== TRADE RESPONSE HANDLER ===")
        logging.info(f"Action: {action}, Second User ID: {second_user_id}, Card ID: {card_id}")
        
        if action == "reject":
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –æ–±–º–µ–Ω
            logging.info(f"Trade rejected by {callback.from_user.id}")
            await state.clear()
            try:
                await callback.message.delete()
                logging.info(f"Deleted trade message {callback.message.message_id} for user {callback.from_user.id}")
            except Exception as e:
                logging.warning(f"Could not delete trade message {callback.message.message_id}: {e}")
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                try:
                    await callback.message.edit_caption(
                        caption=callback.message.caption + "\n\n‚ùå –û–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω",
                        reply_markup=None
                    )
                except Exception as edit_e:
                    logging.warning(f"Could not edit trade message {callback.message.message_id}: {edit_e}")
            
            await callback.bot.send_message(
                chat_id=second_user_id,
                text="‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            )
        else:  # accept
            if card_id is None:
                logging.error("Card ID is required for accept action")
                await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞")
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                sender_id=second_user_id,
                offered_card_id=card_id,
                current_index=0
            )
            await state.set_state(TradeStates.selecting_response_card)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–±–æ—Ä–∞
            await show_card_for_trade(callback.message, callback.from_user.id, 0, True)

        await callback.answer()
    except Exception as e:
        logging.error(f"Error in handle_trade_response: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
        await state.clear()

async def handle_response_card_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞"""
    card_id = int(callback.data.split('_')[2])
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if 'sender_id' not in data or 'offered_card_id' not in data:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–º–µ–Ω–µ")
        await state.clear()
        return
    
    sender_id = data['sender_id']
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö
    response_card = db.get_card(card_id)
    offered_card = db.get_card(data['offered_card_id'])
    
    if not response_card or not offered_card:
        await callback.message.answer("–û—à–∏–±–∫–∞: –æ–¥–Ω–∞ –∏–∑ –∫–∞—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±–º–µ–Ω",
                callback_data=f"confirm_trade_{card_id}_{callback.from_user.id}"
            ),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω", callback_data=f"reject_trade_{card_id}_{callback.from_user.id}")
        ]
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.bot.send_photo(
        chat_id=sender_id,
        photo=response_card[2],
        caption=(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username or callback.from_user.id} "
            f"–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –æ–±–º–µ–Ω—è—Ç—å –≤–∞—à—É –∫–∞—Ä—Ç—É \"{offered_card[1]}\" "
            f"–Ω–∞ –µ–≥–æ –∫–∞—Ä—Ç—É \"{response_card[1]}\". –•–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    await callback.message.answer(
        "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞."
    )
    await callback.answer()

async def handle_trade_confirmation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º"""
    try:
        parts = callback.data.split('_')
        action = parts[1]
        card_id = int(parts[2]) # –ö–∞—Ä—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        second_user_id = int(parts[3]) # ID –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        
        logging.info(f"=== TRADE CONFIRMATION HANDLER ===")
        logging.info(f"Action: {action}, Card ID: {card_id}, Second User ID: {second_user_id}")
        
        if action == "confirm":
            logging.info(f"Trade confirmed by {callback.from_user.id}")
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º)
            data = await state.get_data()
            if 'offered_card_id' not in data:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                try:
                    second_user_key = StorageKey(bot_id=callback.bot.id, chat_id=second_user_id, user_id=second_user_id)
                    second_user_data = await dp.storage.get_data(key=second_user_key)
                    if 'offered_card_id' in second_user_data:
                         data['offered_card_id'] = second_user_data['offered_card_id']
                         logging.info("Restored offered_card_id from second user context")
                    else:
                        raise ValueError("Offered card ID not found in either context")
                except Exception as restore_e:
                     logging.error(f"Failed to restore offered_card_id: {restore_e}")
                     await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—É—é –∫–∞—Ä—Ç—É –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
                     await state.clear()
                     return
            
            offered_card_id = data['offered_card_id'] # –ö–∞—Ä—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            logging.info(f"Using offered card ID: {offered_card_id}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
            trade_successful = db.trade_cards(
                callback.from_user.id, second_user_id,
                offered_card_id, card_id
            )
            
            if trade_successful:
                logging.info("Trade completed successfully in DB")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                try:
                    await callback.message.delete()
                    logging.info(f"Deleted confirmation message {callback.message.message_id}")
                except Exception as e:
                    logging.warning(f"Could not delete confirmation message {callback.message.message_id}: {e}")
                    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    try:
                        await callback.message.edit_caption(
                            caption=callback.message.caption + "\n\n‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!",
                            reply_markup=None
                        )
                    except Exception as edit_e:
                         logging.warning(f"Could not edit confirmation message: {edit_e}")
                
                await callback.bot.send_message(
                    chat_id=second_user_id,
                    text="‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ!"
                )
                await callback.answer("–û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            else:
                 logging.error("Database trade failed")
                 await callback.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–º–µ–Ω–µ")
                 await callback.bot.send_message(
                    chat_id=second_user_id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–º–µ–Ω–µ"
                )
            
        elif action == "reject":
            logging.info(f"Trade rejected by {callback.from_user.id}")
            await state.clear()
            try:
                await callback.message.delete()
                logging.info(f"Deleted confirmation message {callback.message.message_id}")
            except Exception as e:
                 logging.warning(f"Could not delete confirmation message {callback.message.message_id}: {e}")
                 # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                 try:
                     await callback.message.edit_caption(
                        caption=callback.message.caption + "\n\n‚ùå –û–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω",
                        reply_markup=None
                    )
                 except Exception as edit_e:
                     logging.warning(f"Could not edit confirmation message: {edit_e}")
            await callback.bot.send_message(
                chat_id=second_user_id,
                text="‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            )
            await callback.answer("–û–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω")

    except Exception as e:
        logging.error(f"Error in handle_trade_confirmation: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞")
    finally:
        await state.clear()
        # –û—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            parts_clear = callback.data.split('_')
            second_user_id_clear = int(parts_clear[3])
            second_user_key_clear = StorageKey(bot_id=callback.bot.id, chat_id=second_user_id_clear, user_id=second_user_id_clear)
            await dp.storage.set_state(key=second_user_key_clear, state=None)
            await dp.storage.set_data(key=second_user_key_clear, data={})
            logging.info(f"Cleared state for second user {second_user_id_clear}")
        except Exception as clear_e:
             logging.error(f"Error clearing state for second user in finally block: {clear_e}")

async def cancel_trade(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–º–µ–Ω–∞"""
    logging.info(f"Trade cancelled by user {callback.from_user.id}")
    await state.clear()
    try:
        await callback.message.delete()
        logging.info(f"Deleted trade message {callback.message.message_id}")
    except Exception as e:
        logging.warning(f"Could not delete trade message {callback.message.message_id}: {e}")
        try:
            await callback.message.edit_text("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.")
        except Exception as edit_e:
            logging.warning(f"Could not edit trade message {callback.message.message_id}: {edit_e}")
    await callback.answer() 