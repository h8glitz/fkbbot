from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from database import Database
from components.states import AddCard, AdminStates
import logging
from datetime import datetime
from dispatcher import bot

db = Database('film_bot.db')

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –û—Ç–º–µ–Ω—ã ---
def create_cancel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_state")]
    ])

def get_admin_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="add_card"),
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç", callback_data="list_cards")
        ],
        [
            InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç—É", callback_data="find_card"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="delete_card")
        ],
        [
            InlineKeyboardButton(text="üéØ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", callback_data="add_attempts"),
            InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="ban_user")
        ],
        [
            InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="unban_user"),
            InlineKeyboardButton(text="üé´ –î–æ–±–∞–≤–∏—Ç—å Film Pass", callback_data="add_pass")
        ],
        [
            InlineKeyboardButton(text="üí∞ –í—ã–¥–∞—Ç—å –¥–æ–Ω–∞—Ç", callback_data="add_donate")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def process_add_card(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AddCard.waiting_for_name)

async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    await state.update_data(card_name=message.text)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AddCard.waiting_for_photo)

async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã"""
    if not message.photo:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã.",
            reply_markup=create_cancel_keyboard()
        )
        return

    photo_url = message.photo[-1].file_id
    await state.update_data(photo_url=photo_url)
    await message.answer(
        "–ö–∞—Ä—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è? (1 - –¥–∞, 0 - –Ω–µ—Ç):",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AddCard.waiting_for_limited)

async def process_limited(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã"""
    if not message.text.isdigit() or int(message.text) not in [0, 1]:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ 1",
            reply_markup=create_cancel_keyboard()
        )
        return

    await state.update_data(limited=int(message.text))
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AddCard.waiting_for_rare)

async def process_rare(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã"""
    await state.update_data(rare=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AddCard.waiting_for_points)

async def process_points(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—á–∫–æ–≤ –∫–∞—Ä—Ç—ã"""
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=create_cancel_keyboard()
        )
        return

    await state.update_data(points=int(message.text))
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AddCard.waiting_for_price)

async def process_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –∫–∞—Ä—Ç—ã"""
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=create_cancel_keyboard()
        )
        return

    await state.update_data(price=int(message.text))
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ counts:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AddCard.waiting_for_counts)

async def process_counts(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ counts - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥"""
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=create_cancel_keyboard()
        )
        return
    # –ó–¥–µ—Å—å –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω—ã —É–∂–µ –Ω–µ —Ç–∞–∫ –∫—Ä–∏—Ç–∏—á–Ω–∞, —Ç.–∫. —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
    # –ù–æ –¥–æ–±–∞–≤–∏–º –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞
    try:
        data = await state.get_data()
        card_id = db.add_card(
            data['card_name'],
            data['photo_url'],
            data['limited'],
            data['rare'],
            data['points'],
            data['price'],
            int(message.text)
        )
        await message.answer(f"–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID –∫–∞—Ä—Ç—ã: {card_id}")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {str(e)}")
    finally:
        await state.clear()

async def process_list_cards(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç"""
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    cards = db.get_all_cards()
    if not cards:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –ø—É—Å—Ç")
        return

    for card in cards:
        card_info = (
            f"ID: {card[0]}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {card[1]}\n"
            f"–†–µ–¥–∫–æ—Å—Ç—å: {card[4]}\n"
            f"–û—á–∫–∏: {card[5]}\n"
            f"–¶–µ–Ω–∞: {card[6]}\n"
            f"Counts: {card[7]}\n"
            f"{'üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è' if card[3] else 'üîì –û–±—ã—á–Ω–∞—è'}"
        )
        try:
             await callback.message.answer_photo(
                photo=card[2],
                caption=card_info
            )
        except Exception as e:
            logging.error(f"Error sending card {card[0]}: {e}")
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã ID {card[0]}: {e}")

async def process_find_card(callback: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –ø–æ ID"""
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    # –ó–¥–µ—Å—å state –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–µ –Ω—É–∂–Ω–∞
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç—ã:")

# --- –§—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ---
async def process_delete_card(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    logging.info(f"Admin {callback.from_user.id} initiated delete card process.")
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_delete_card_id)
    logging.info(f"Admin {callback.from_user.id} set state to {await state.get_state()}")

async def process_delete_card_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç—ã (—á–∏—Å–ª–æ).",
            reply_markup=create_cancel_keyboard()
        )
        return
        
    card_id = int(message.text)
    card = db.get_card(card_id)
    
    if not card:
        await message.answer(
            f"–ö–∞—Ä—Ç–∞ —Å ID {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_cancel_keyboard()
        )
        return
        
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    card_info = (
        f"ID: {card[0]}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {card[1]}\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {card[4]}"
    )
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_card_{card_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_admin_state")]
    ]
    
    try:
        await message.answer_photo(
            photo=card[2],
            caption=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É?\n\n{card_info}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –ø–æ–∑–∂–µ
        await state.update_data(card_to_delete_id=card_id) 
    except Exception as e:
        logging.error(f"Error sending confirmation photo for delete card {card_id}: {e}")
        await message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã {card_id}.\n" 
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É: {card[1]} ({card[4]})?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.update_data(card_to_delete_id=card_id)

# --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ---

async def process_add_attempts(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_user_id)

async def process_user_id_for_attempts(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫"""
    user_id = None
    username = None
    
    input_text = message.text.lstrip('@')
    if input_text.isdigit():
        user_id = int(input_text)
        user = db.get_user(user_id)
    else:
        username = input_text
        user = db.get_user_by_username(username)
    
    if not user:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username",
             reply_markup=create_cancel_keyboard()
        )
        return

    user_id = user[0]
    username = user[1]
    await state.update_data(target_user_id=user_id, target_username=username)
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username or user_id}:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_attempts)

async def process_attempts_count(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥"""
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=create_cancel_keyboard()
        )
        return

    data = await state.get_data()
    user_id = data['target_user_id']
    username = data.get('target_username') # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ state
    attempts = int(message.text)

    db.add_attempts(user_id, attempts)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username or user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {attempts} –ø–æ–ø—ã—Ç–æ–∫")
    await state.clear()

async def process_ban_user(callback: types.CallbackQuery, state: FSMContext):
    """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    logging.info(f"Admin {callback.from_user.id} initiated ban process.")
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_ban_user_id)
    logging.info(f"Admin {callback.from_user.id} set state to {await state.get_state()}")

async def process_ban_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥"""
    user_id = None
    username = None
    
    input_text = message.text.lstrip('@')
    if input_text.isdigit():
        user_id = int(input_text)
        user = db.get_user(user_id)
    else:
        username = input_text
        user = db.get_user_by_username(username)
    
    if not user:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username",
             reply_markup=create_cancel_keyboard()
        )
        return # –ù–µ –æ—á–∏—â–∞–µ–º state, –¥–∞–µ–º —à–∞–Ω—Å –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞

    user_id = user[0]
    username = user[1] # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if db.is_banned(user_id):
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or user_id} —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω")
        await state.clear()
        return

    db.ban_user(user_id)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or user_id} –∑–∞–±–∞–Ω–µ–Ω")
    await state.clear()

async def process_unban_user(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    logging.info(f"Admin {callback.from_user.id} initiated unban process.")
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_unban_user_id)
    logging.info(f"Admin {callback.from_user.id} set state to {await state.get_state()}")

async def process_unban_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥"""
    user_id = None
    username = None
    
    input_text = message.text.lstrip('@')
    if input_text.isdigit():
        user_id = int(input_text)
        user = db.get_user(user_id)
    else:
        username = input_text
        user = db.get_user_by_username(username)
    
    if not user:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username",
            reply_markup=create_cancel_keyboard()
        )
        return

    user_id = user[0]
    username = user[1]
    if not db.is_banned(user_id):
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or user_id} –Ω–µ –∑–∞–±–∞–Ω–µ–Ω")
        await state.clear()
        return

    db.unban_user(user_id)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    await state.clear()

async def process_add_pass(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Film Pass –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    logging.info(f"Admin {callback.from_user.id} started adding Film Pass")
    await callback.answer()
    
    try:
        await bot.send_message(
            chat_id=callback.from_user.id,
            text="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username:",
            reply_markup=create_cancel_keyboard()
        )
        await state.set_state(AdminStates.waiting_for_pass_user_id)
        logging.info(f"Admin state set to {await state.get_state()}")
    except Exception as e:
        logging.error(f"Error in process_add_pass: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def process_pass_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Film Pass"""
    logging.info(f"Received user input for pass: {message.text}")
    
    user_id = None
    username = None
    
    input_text = message.text.lstrip('@')
    logging.info(f"Processed input text: {input_text}")
    
    if input_text.isdigit():
        user_id = int(input_text)
        logging.info(f"Searching user by ID: {user_id}")
        user = db.get_user(user_id)
    else:
        username = input_text
        logging.info(f"Searching user by username: {username}")
        user = db.get_user_by_username(username)
    
    if not user:
        logging.warning(f"User not found for input: {message.text}")
        try:
            await bot.send_message(
                chat_id=message.from_user.id,
                text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username",
                reply_markup=create_cancel_keyboard()
            )
        except Exception as e:
            logging.error(f"Error in process_pass_user_id: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    logging.info(f"Found user: {user}")
    user_id = user[0]
    username = user[1]
    await state.update_data(target_user_id=user_id, target_username=username)
    
    expiry_date = db.get_pass_expiry(user_id)
    logging.info(f"Current pass expiry date: {expiry_date}")
    
    prompt_text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è Film Pass –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username or user_id} (1-12):"
    if expiry_date and expiry_date > datetime.now():
        prompt_text = (
            f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username or user_id} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π Film Pass –¥–æ {expiry_date.strftime('%d.%m.%Y')}\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è (1-12):"
        )
    
    try:
        await bot.send_message(
            chat_id=message.from_user.id,
            text=prompt_text,
            reply_markup=create_cancel_keyboard()
        )
        await state.set_state(AdminStates.waiting_for_pass_months)
    except Exception as e:
        logging.error(f"Error in process_pass_user_id: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def process_pass_months(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è Film Pass - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥"""
    logging.info(f"Received months input: {message.text}")
    
    if not message.text.isdigit() or not (1 <= int(message.text) <= 12):
        logging.warning(f"Invalid months input: {message.text}")
        try:
            await bot.send_message(
                chat_id=message.from_user.id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12",
                reply_markup=create_cancel_keyboard()
            )
        except Exception as e:
            logging.error(f"Error in process_pass_months: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    data = await state.get_data()
    user_id = data['target_user_id']
    username = data.get('target_username') # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ state
    months = int(message.text)
    logging.info(f"Adding {months} months of pass to user {user_id}")

    if db.add_pass(user_id, months):
        expiry_date = db.get_pass_expiry(user_id)
        logging.info(f"Successfully added pass, new expiry date: {expiry_date}")
        try:
            await bot.send_message(
                chat_id=message.from_user.id,
                text=f"Film Pass –¥–ª—è @{username or user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                     f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry_date.strftime('%d.%m.%Y')}"
            )
        except Exception as e:
            logging.error(f"Error in process_pass_months: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    else:
        logging.error(f"Failed to add pass for user {user_id}")
        try:
            await bot.send_message(
                chat_id=message.from_user.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ Film Pass"
            )
        except Exception as e:
            logging.error(f"Error in process_pass_months: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    await state.clear()

async def process_add_donate(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–¥–∞—á–∞ –¥–æ–Ω–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    logging.info(f"Admin {callback.from_user.id} started adding donate")
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_donate_user_id)

async def process_donate_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ–Ω–∞—Ç–∞"""
    logging.info(f"Received user input for donate: {message.text}")
    
    user_id = None
    username = None
    
    input_text = message.text.lstrip('@')
    logging.info(f"Processed input text: {input_text}")
    
    if input_text.isdigit():
        user_id = int(input_text)
        logging.info(f"Searching user by ID: {user_id}")
        user = db.get_user(user_id)
    else:
        username = input_text
        logging.info(f"Searching user by username: {username}")
        user = db.get_user_by_username(username)
    
    if not user:
        logging.warning(f"User not found for input: {message.text}")
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username",
            reply_markup=create_cancel_keyboard()
        )
        return

    logging.info(f"Found user: {user}")
    user_id = user[0]
    username = user[1]
    await state.update_data(target_user_id=user_id, target_username=username)
    
    current_donate = db.get_user_donate(user_id)
    logging.info(f"Current donate balance: {current_donate}")
    
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–æ–Ω–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username or user_id}: {current_donate}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ç–∞ –¥–ª—è –≤—ã–¥–∞—á–∏:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_donate_amount)

async def process_donate_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–Ω–∞—Ç–∞ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥"""
    logging.info(f"Received donate amount input: {message.text}")
    
    if not message.text.isdigit() or int(message.text) <= 0:
        logging.warning(f"Invalid donate amount input: {message.text}")
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=create_cancel_keyboard()
        )
        return

    data = await state.get_data()
    user_id = data['target_user_id']
    username = data.get('target_username')
    amount = int(message.text)
    logging.info(f"Adding {amount} donate to user {user_id}")

    if db.add_donate(user_id, amount):
        new_balance = db.get_user_donate(user_id)
        logging.info(f"Successfully added donate, new balance: {new_balance}")
        await message.answer(
            f"–î–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username or user_id}!\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}"
        )
    else:
        logging.error(f"Failed to add donate for user {user_id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ–Ω–∞—Ç–∞")
    
    await state.clear() 