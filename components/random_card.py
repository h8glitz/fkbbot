from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import logging
import random
from database import Database
from components.states import RandomCardStates

db = Database('film_bot.db')

async def start_random_card(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    await state.set_state(RandomCardStates.waiting_for_roll)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—Ä–æ—Å–∫–∞
    keyboard = [[InlineKeyboardButton(text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏", callback_data="roll_random_card")]]
    
    await callback.message.answer(
        "üé≤ –ë—Ä–æ—Å—å—Ç–µ –∫–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É!\n"
        "–ß–µ–º –±–æ–ª—å—à–µ –≤—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–¥–∫—É—é –∫–∞—Ä—Ç—É!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def handle_random_card_roll(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    dice_msg = await callback.message.answer_dice(emoji="üé≤")
    roll_value = dice_msg.dice.value
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–∞–≤—à–µ–≥–æ —á–∏—Å–ª–∞
    rarity = "–û–±—ã—á–Ω–∞—è"
    if roll_value >= 5:
        rarity = "–†–µ–¥–∫–∞—è"
    elif roll_value >= 3:
        rarity = "–ù–µ–æ–±—ã—á–Ω–∞—è"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    card = db.get_random_card_by_rarity(rarity)
    
    if not card:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        db.add_card_to_user(callback.from_user.id, card[0])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ
        card_info = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç—É:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {card[1]}\n"
            f"–†–µ–¥–∫–æ—Å—Ç—å: {card[4]}\n"
            f"{'üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è' if card[3] else 'üîì –û–±—ã—á–Ω–∞—è'}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã
        await callback.message.answer_photo(
            photo=card[2],
            caption=card_info
        )
        
    except Exception as e:
        logging.error(f"Error during random card roll: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã")
    
    await state.clear() 