from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import logging
import random
from database import Database
from components.states import DiceStates
import asyncio
from dispatcher import dp, bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
from aiogram.fsm.storage.base import StorageKey

db = Database('film_bot.db')

async def show_card_for_dice(message: types.Message, user_id: int, current_index: int, for_response: bool = False):
    """–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
    cards = db.get_user_cards(user_id)
    if not cards:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã")
        return None

    card = cards[current_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
    card_info = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {card[1]}\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {card[4]}\n"
        f"{'üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è' if card[3] else 'üîì –û–±—ã—á–Ω–∞—è'}\n\n"
        f"{current_index + 1}/{len(cards)}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    keyboard = get_dice_keyboard(current_index, len(cards), card[0], for_response)

    try:
        await message.edit_media(
            types.InputMediaPhoto(
                media=card[2],
                caption=card_info
            ),
            reply_markup=keyboard
        )
    except Exception as e:
        try:
            await message.answer_photo(
                photo=card[2],
                caption=card_info,
                reply_markup=keyboard
            )
        except Exception as e:
            logging.error(f"Error showing card for dice: {e}")
            return None
    
    return cards

def get_dice_keyboard(current_index: int, total_cards: int, card_id: int, for_response: bool = False):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç –≤ –∏–≥—Ä–µ –≤ –∫–æ—Å—Ç–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="dice_prev"),
            InlineKeyboardButton(text=f"{current_index + 1}/{total_cards}", callback_data="dice_info"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data="dice_next")
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞
    action = "respond_dice" if for_response else "dice_select"
    keyboard.append([
        InlineKeyboardButton(text="üé≤ –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É", callback_data=f"{action}_{card_id}")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_dice")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def handle_dice_navigation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–∞–º –≤ –∏–≥—Ä–µ –≤ –∫–æ—Å—Ç–∏"""
    current_state = await state.get_state()
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ª–∏ —ç—Ç–æ (–≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã)
    for_response = current_state == DiceStates.selecting_response_card
    
    if callback.data == "dice_prev":
        cards = db.get_user_cards(callback.from_user.id)
        current_index = len(cards) - 1 if current_index == 0 else current_index - 1
    elif callback.data == "dice_next":
        cards = db.get_user_cards(callback.from_user.id)
        current_index = 0 if current_index == len(cards) - 1 else current_index + 1
    elif callback.data == "dice_info":
        await callback.answer()
        return
    
    await state.update_data(current_index=current_index)
    await show_card_for_dice(callback.message, callback.from_user.id, current_index, for_response)
    await callback.answer()

async def handle_dice_card_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã"""
    try:
        card_id = int(callback.data.split('_')[2])
        card = db.get_card(card_id)
        if not card:
            await callback.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ä—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(offered_card_id=card_id)
        await state.set_state(DiceStates.waiting_for_username)
        
        card_info = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {card[1]}\n"
            f"–†–µ–¥–∫–æ—Å—Ç—å: {card[4]}\n"
            f"{'üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è' if card[3] else 'üîì –û–±—ã—á–Ω–∞—è'}"
        )
        
        await callback.message.answer_photo(
            photo=card[2],
            caption=f"{card_info}\n\n–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–≥—Ä—ã:"
        )
        
    except Exception as e:
        logging.error(f"Error in handle_dice_card_selection: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã")
        await state.clear()

async def handle_dice_username_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–≥—Ä—ã"""
    try:
        username = message.text.lstrip('@')
        logging.info(f"Processing dice game username input: {username}")
        
        target_user = db.get_user_by_username(username)
        if not target_user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if target_user[0] == message.from_user.id:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–∞–º–∏ —Å —Å–æ–±–æ–π")
            return
        
        data = await state.get_data()
        logging.info(f"Current state data: {data}")
        
        if 'offered_card_id' not in data:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É")
            await state.clear()
            return
            
        offered_card = db.get_card(data['offered_card_id'])
        if not offered_card:
            await message.answer("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–≥—Ä—ã —Å ID –∫–∞—Ä—Ç—ã –≤ callback_data
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data=f"accept_dice_{message.from_user.id}_{data['offered_card_id']}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_dice_{message.from_user.id}_{data['offered_card_id']}"
                )
            ]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã
        dice_message = (
            f"üé≤ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏\n"
            f"–û—Ç: @{message.from_user.username or message.from_user.id}\n\n"
            f"–°—Ç–∞–≤–∏—Ç –∫–∞—Ä—Ç—É:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {offered_card[1]}\n"
            f"–†–µ–¥–∫–æ—Å—Ç—å: {offered_card[4]}\n"
            f"{'üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è' if offered_card[3] else 'üîì –û–±—ã—á–Ω–∞—è'}"
        )
        
        try:
            await message.bot.send_photo(
                chat_id=target_user[0],
                photo=offered_card[2],
                caption=dice_message,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(target_user_id=target_user[0])
            
            await message.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        except Exception as e:
            logging.error(f"Error sending dice game proposal: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä—ã")
            await state.clear()
            
    except Exception as e:
        logging.error(f"Error in handle_dice_username_input: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await state.clear()

async def handle_dice_response(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã"""
    try:
        parts = callback.data.split('_')
        action = parts[1]
        sender_id = int(parts[2])
        offered_card_id = int(parts[3])  # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ä—Ç—ã –∏–∑ callback_data
        
        logging.info(f"=== DICE RESPONSE HANDLER ===")
        logging.info(f"Action: {action}, Sender ID: {sender_id}, Offered card ID: {offered_card_id}")
        
        if action == "reject":
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –∏–≥—Ä—É
            await callback.message.edit_caption(
                caption=callback.message.caption + "\n\n‚ùå –ò–≥—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                reply_markup=None
            )
            await callback.bot.send_message(
                chat_id=sender_id,
                text="‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            )
            await state.clear()
        else:
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏–≥—Ä—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É
            # –ü–æ–ª—É—á–∞–µ–º username –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender = await callback.bot.get_chat(sender_id)
            sender_username = sender.username or str(sender_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                sender_id=sender_id,
                sender_username=sender_username,
                target_user_id=callback.from_user.id,
                offered_card_id=offered_card_id,
                current_index=0
            )
            
            logging.info(f"State data after accepting: {await state.get_data()}")
            
            await state.set_state(DiceStates.selecting_response_card)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–±–æ—Ä–∞
            await show_card_for_dice(callback.message, callback.from_user.id, 0, True)
            
    except Exception as e:
        logging.error(f"Error in handle_dice_response: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
        await state.clear()

async def handle_dice_response_card_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ –∏–≥—Ä–µ"""
    try:
        card_id = int(callback.data.split('_')[2])
        data = await state.get_data()
        
        logging.info(f"=== DICE RESPONSE CARD SELECTION ===")
        logging.info(f"Card ID: {card_id}")
        logging.info(f"Current state data: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['sender_id', 'offered_card_id', 'target_user_id']
        missing_fields = [field for field in required_fields if field not in data]
        
        if missing_fields:
            logging.error(f"Missing required data. Current state data: {data}")
            logging.error(f"Missing fields: {missing_fields}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ")
            await state.clear()
            return
        
        sender_id = data['sender_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_cards = db.get_user_cards(callback.from_user.id)
        if not any(card[0] == card_id for card in user_cards):
            await callback.answer("–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö
        response_card = db.get_card(card_id)
        offered_card = db.get_card(data['offered_card_id'])
        
        if not response_card or not offered_card:
            logging.error(f"Cards not found. Response card ID: {card_id}, Offered card ID: {data['offered_card_id']}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –æ–¥–Ω–∞ –∏–∑ –∫–∞—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–≥—Ä—ã –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                    callback_data=f"confirm_dice_start_{card_id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è",
                    callback_data="cancel_dice"
                )
            ]
        ]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state_data = {
            'response_card_id': card_id,
            'target_user_id': callback.from_user.id,
            'offered_card_id': data['offered_card_id'],
            'sender_id': sender_id,
            'sender_username': data.get('sender_username', ''),
            'current_state': 'waiting_for_confirmation'
        }
        
        # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.set_state(DiceStates.waiting_for_confirmation)
        await state.update_data(state_data)
        
        logging.info(f"Updated state data: {await state.get_data()}")
        logging.info(f"Current state after update: {await state.get_state()}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        try:
            await callback.bot.send_photo(
                chat_id=sender_id,
                photo=response_card[2],
                caption=(
                    f"–ò–≥—Ä–æ–∫ @{callback.from_user.username or callback.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É –¥–ª—è –∏–≥—Ä—ã:\n\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {response_card[1]}\n"
                    f"–†–µ–¥–∫–æ—Å—Ç—å: {response_card[4]}\n"
                    f"{'üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è' if response_card[3] else 'üîì –û–±—ã—á–Ω–∞—è'}\n\n"
                    "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π?"
                ),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            await callback.message.answer(
                "–í–∞—à –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞."
            )
        except Exception as e:
            logging.error(f"Error sending confirmation message: {e}")
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await state.clear()
            return
        
    except Exception as e:
        logging.error(f"Error in handle_dice_response_card_selection: {e}")
        logging.error("Full error details:", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã")
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith("confirm_dice_start_"))
async def handle_dice_game_confirmation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º"""
    try:
        logging.info("=== DICE GAME CONFIRMATION ===")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ä—Ç—ã –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        response_card_id = int(callback.data.split('_')[3])
        logging.info(f"Response card ID from callback: {response_card_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        current_user_data = await state.get_data()
        logging.info(f"Current user ({callback.from_user.id}) state data: {current_user_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['offered_card_id', 'target_user_id']
        missing_fields = [field for field in required_fields if field not in current_user_data]
        
        if missing_fields:
            logging.error(f"Missing required fields for user {callback.from_user.id}: {missing_fields}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –±—ã–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã (1). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            # –¢–∞–∫–∂–µ –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            target_user_id = current_user_data.get('target_user_id')
            if target_user_id:
                target_key = StorageKey(bot_id=callback.bot.id, chat_id=target_user_id, user_id=target_user_id)
                await dp.storage.set_state(key=target_key, state=None)
                await dp.storage.set_data(key=target_key, data={})
            return
            
        target_user_id = current_user_data['target_user_id'] # ID –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É)
        sender_id = callback.from_user.id # ID –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∏–≥—Ä—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª)
        offered_card_id = current_user_data['offered_card_id']
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        game_data = {
            'response_card_id': response_card_id,
            'offered_card_id': offered_card_id,
            'target_user_id': target_user_id, 
            'sender_id': sender_id,
            'game_state': 'waiting_for_first_roll'
        }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –û–ë–û–ò–• –∏–≥—Ä–æ–∫–æ–≤
        await state.set_state(DiceStates.waiting_for_first_roll) # –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (sender_id)
        await state.update_data(game_data)
        logging.info(f"Updated state data for user {sender_id}: {await state.get_data()}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (target_user_id)
        try:
            target_key = StorageKey(bot_id=callback.bot.id, chat_id=target_user_id, user_id=target_user_id)
            await dp.storage.set_state(key=target_key, state=DiceStates.waiting_for_first_roll)
            await dp.storage.set_data(key=target_key, data=game_data)
            logging.info(f"Updated state data for user {target_user_id}: {await dp.storage.get_data(key=target_key)}")
        except Exception as e:
             logging.error(f"Failed to update state for target user {target_user_id}: {e}")
             await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
             await state.clear()
             return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö
        response_card = db.get_card(response_card_id)
        offered_card = db.get_card(offered_card_id)

        if not response_card or not offered_card:
            logging.error("Failed to get card info")
            logging.error(f"Response card ID: {response_card_id}")
            logging.error(f"Offered card ID: {offered_card_id}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö")
            await state.clear()
            target_key = StorageKey(bot_id=callback.bot.id, chat_id=target_user_id, user_id=target_user_id)
            await dp.storage.set_state(key=target_key, state=None)
            await dp.storage.set_data(key=target_key, data={})
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        game_message = (
            "üé≤ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n"
            f"–ö–∞—Ä—Ç—ã –≤ –∏–≥—Ä–µ:\n"
            f"1. {offered_card[1]} ({offered_card[4]})\n"
            f"2. {response_card[1]} ({response_card[4]})\n\n"
            "–°–µ–π—á–∞—Å –º—ã –ø–æ–¥–±—Ä–æ—Å–∏–º –º–æ–Ω–µ—Ç–∫—É, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –±—É–¥–µ—Ç –±—Ä–æ—Å–∞—Ç—å –∫–æ—Å—Ç–∏ –ø–µ—Ä–≤—ã–º!"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        await callback.message.answer(game_message)
        await callback.bot.send_message(
            chat_id=target_user_id,
            text=game_message
        )

        # –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É (–∞–Ω–∏–º–∞—Ü–∏—è)
        coin_msg = await callback.message.answer_dice(emoji="üéØ")
        coin_value = coin_msg.dice.value

        # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        await asyncio.sleep(4)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–Ω–µ—á–µ—Ç–Ω–æ–µ - –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ (sender_id), —á–µ—Ç–Ω–æ–µ - –≤—Ç–æ—Ä–æ–π (target_user_id))
        first_player = sender_id if coin_value % 2 == 1 else target_user_id
        second_player = target_user_id if first_player == sender_id else sender_id

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ò–ì–†–´ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–æ–∫–∞—Ö –¥–ª—è –û–ë–û–ò–•
        game_data.update({
            'first_player_id': first_player,
            'second_player_id': second_player
        })
        
        await state.update_data(game_data) # –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (sender_id)
        target_key = StorageKey(bot_id=callback.bot.id, chat_id=target_user_id, user_id=target_user_id)
        await dp.storage.set_data(key=target_key, data=game_data) # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (target_user_id)
        
        logging.info(f"Final state data for user {sender_id}: {await state.get_data()}")
        logging.info(f"Final state data for user {target_user_id}: {await dp.storage.get_data(key=target_key)}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—Ä–æ—Å–∫–∞
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏",
                    callback_data=f"roll_dice_first_{first_player}"
                )
            ]
        ]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
        first_player_name = (await callback.bot.get_chat(first_player)).username or str(first_player)
        second_player_name = (await callback.bot.get_chat(second_player)).username or str(second_player)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏
        result_message = (
            f"üéØ –ñ—Ä–µ–±–∏–π –±—Ä–æ—à–µ–Ω!\n\n"
            f"–ü–µ—Ä–≤—ã–º –±—Ä–æ—Å–∞–µ—Ç: @{first_player_name}\n"
            f"–í—Ç–æ—Ä—ã–º –±—Ä–æ—Å–∞–µ—Ç: @{second_player_name}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É
        await callback.bot.send_message(
            chat_id=first_player,
            text=result_message + "\n\n–í–∞—à —Ö–æ–¥! –ë—Ä–æ—Å–∞–π—Ç–µ –∫–æ—Å—Ç–∏!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É
        await callback.bot.send_message(
            chat_id=second_player,
            text=result_message + "\n\n–û–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞!"
        )
        
        logging.info("Game confirmation completed successfully")
        
    except Exception as e:
        logging.error(f"Error in handle_dice_game_confirmation: {e}")
        logging.error("Full error details:", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–≥—Ä—ã")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            current_user_data_on_error = await state.get_data()
            target_user_id_on_error = current_user_data_on_error.get('target_user_id')
            await state.clear()
            if target_user_id_on_error:
                target_key = StorageKey(bot_id=callback.bot.id, chat_id=target_user_id_on_error, user_id=target_user_id_on_error)
                await dp.storage.set_state(key=target_key, state=None)
                await dp.storage.set_data(key=target_key, data={})
        except Exception as clear_error:
            logging.error(f"Error clearing state during exception handling: {clear_error}")

async def handle_first_roll(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π"""
    try:
        logging.info(f"=== FIRST ROLL HANDLER ===")
        logging.info(f"User ID attempting roll: {callback.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        data = await state.get_data()
        logging.info(f"Current state data for user {callback.from_user.id} before processing: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ –¥–∞–Ω–Ω—ã—Ö
        game_state = data.get('game_state')
        if game_state != 'waiting_for_first_roll':
            logging.error(f"Invalid game state in data for user {callback.from_user.id}: {game_state}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (1). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            second_player_id = data.get('second_player_id')
            if second_player_id:
                try:
                    target_key = StorageKey(bot_id=callback.bot.id, chat_id=second_player_id, user_id=second_player_id)
                    await dp.storage.set_state(key=target_key, state=None)
                    await dp.storage.set_data(key=target_key, data={})
                except Exception as clear_error:
                    logging.error(f"Error clearing second player state during error handling: {clear_error}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['first_player_id', 'second_player_id', 'response_card_id', 'offered_card_id']
        missing_fields = [field for field in required_fields if field not in data]
        
        if missing_fields:
            logging.error(f"Missing required fields for user {callback.from_user.id}: {missing_fields}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –±—ã–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã (2). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            second_player_id = data.get('second_player_id')
            if second_player_id:
                 try:
                    target_key = StorageKey(bot_id=callback.bot.id, chat_id=second_player_id, user_id=second_player_id)
                    await dp.storage.set_state(key=target_key, state=None)
                    await dp.storage.set_data(key=target_key, data={})
                 except Exception as clear_error:
                    logging.error(f"Error clearing second player state during error handling: {clear_error}")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä–æ–∫–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        expected_player_id = int(callback.data.split('_')[3])
        first_player_id = data.get('first_player_id')
        
        logging.info(f"Expected first player ID: {first_player_id}")
        logging.info(f"Expected player ID from callback: {expected_player_id}")
        logging.info(f"Current user ID: {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–æ—Å–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
        is_correct_player = (
            callback.from_user.id == first_player_id or 
            callback.from_user.id == expected_player_id
        )
        
        if not is_correct_player:
            logging.warning(f"Wrong player attempting first roll.")
            logging.warning(f"Expected: {first_player_id} (or {expected_player_id}), Got: {callback.from_user.id}")
            await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –±—Ä–æ—Å–∞—Ç—å –∫–æ—Å—Ç–∏!", show_alert=True)
            return
        
        logging.info("First roll validation passed, proceeding with dice roll")

        # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞
        await callback.message.edit_reply_markup(reply_markup=None)
        
        dice_msg = await callback.message.answer_dice(emoji="üé≤")
        first_roll = dice_msg.dice.value
        logging.info(f"First roll value: {first_roll}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –î–õ–Ø –û–ë–û–ò–• –ò–ì–†–û–ö–û–í
        data['first_roll'] = first_roll
        data['game_state'] = 'waiting_for_second_roll'
        
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–∫—Ç–æ –±—Ä–æ—Å–∏–ª)
        await state.update_data(data)
        logging.info(f"Updated state data for user {callback.from_user.id}: {await state.get_data()}")
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        second_player_id = data.get('second_player_id')
        if not second_player_id:
            logging.error(f"Second player ID not found in state data for user {callback.from_user.id}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return 
            
        try:
            target_key = StorageKey(bot_id=callback.bot.id, chat_id=second_player_id, user_id=second_player_id)
            await dp.storage.set_data(key=target_key, data=data)
            logging.info(f"Updated state data for user {second_player_id}: {await dp.storage.get_data(key=target_key)}")
        except Exception as e:
            logging.error(f"Failed to update state data for second player {second_player_id}: {e}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (3). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            try:
                await dp.storage.set_state(key=target_key, state=None)
                await dp.storage.set_data(key=target_key, data={})
            except Exception as clear_error:
                logging.error(f"Error clearing second player state during error handling: {clear_error}")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å —É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        updated_data = await state.get_data()
        if updated_data.get('game_state') != 'waiting_for_second_roll':
            logging.error("Failed to update game state for current player")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (4). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            try:
                target_key = StorageKey(bot_id=callback.bot.id, chat_id=second_player_id, user_id=second_player_id)
                await dp.storage.set_state(key=target_key, state=None)
                await dp.storage.set_data(key=target_key, data={})
            except Exception as clear_error:
                logging.error(f"Error clearing second player state during error handling: {clear_error}")
            return
        
        # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É–±–∏–∫–∞
        await asyncio.sleep(4)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        await state.set_state(DiceStates.waiting_for_second_roll)
        current_state = await state.get_state()
        logging.info(f"FSM state for user {callback.from_user.id} changed to {current_state}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        try:
            target_key = StorageKey(bot_id=callback.bot.id, chat_id=second_player_id, user_id=second_player_id)
            await dp.storage.set_state(key=target_key, state=DiceStates.waiting_for_second_roll)
            logging.info(f"FSM state for user {second_player_id} set to {await dp.storage.get_state(key=target_key)}")
        except Exception as e:
            logging.error(f"Failed to set FSM state for second player {second_player_id}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –±—Ä–æ—Å–∫–∞
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏",
                    callback_data=f"roll_dice_second_{second_player_id}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                )
            ]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π
        await callback.bot.send_message(
            chat_id=second_player_id,
            text=f"–ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –≤—ã–±—Ä–æ—Å–∏–ª: {first_roll}\n–í–∞—à —Ö–æ–¥! –ë—Ä–æ—Å–∞–π—Ç–µ –∫–æ—Å—Ç–∏!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        logging.info(f"Sent roll button to second player: {second_player_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É
        await callback.message.answer(
            f"–í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏: {first_roll}\n–û–∂–∏–¥–∞–π—Ç–µ –±—Ä–æ—Å–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞!"
        )
        logging.info("First roll handler completed successfully")
            
    except Exception as e:
        logging.error(f"Error in handle_first_roll: {e}")
        logging.error(f"Full error details:", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–æ—Å–∫–∞")
        await state.clear()
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        try:
            data_on_error = await state.get_data()
            second_player_id_on_error = data_on_error.get('second_player_id')
            if second_player_id_on_error:
                target_key = StorageKey(bot_id=callback.bot.id, chat_id=second_player_id_on_error, user_id=second_player_id_on_error)
                await dp.storage.set_state(key=target_key, state=None)
                await dp.storage.set_data(key=target_key, data={})
        except Exception as clear_error:
             logging.error(f"Error clearing second player state during main exception handling: {clear_error}")

async def handle_second_roll(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π"""
    try:
        logging.info(f"=== SECOND ROLL HANDLER ===")
        logging.info(f"User ID attempting roll: {callback.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        logging.info(f"Current state data before processing: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ –¥–∞–Ω–Ω—ã—Ö
        game_state = data.get('game_state')
        logging.info(f"Game state from data: {game_state}")
        
        if game_state != 'waiting_for_second_roll':
            logging.error(f"Invalid game state in data: {game_state}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['first_roll', 'first_player_id', 'second_player_id', 'response_card_id', 'offered_card_id']
        missing_fields = [field for field in required_fields if field not in data]
        
        if missing_fields:
            logging.error(f"Missing required fields: {missing_fields}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –±—ã–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä–æ–∫–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        expected_player_id = int(callback.data.split('_')[3])
        second_player_id = data.get('second_player_id')
        
        logging.info(f"Expected second player ID: {second_player_id}")
        logging.info(f"Expected player ID from callback: {expected_player_id}")
        logging.info(f"Current user ID: {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–æ—Å–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
        is_correct_player = (
            callback.from_user.id == second_player_id or 
            callback.from_user.id == expected_player_id
        )
        
        if not is_correct_player:
            logging.warning(f"Wrong player attempting second roll.")
            logging.warning(f"Expected: {second_player_id} (or {expected_player_id}), Got: {callback.from_user.id}")
            await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –±—Ä–æ—Å–∞—Ç—å –∫–æ—Å—Ç–∏!", show_alert=True)
            return
        
        logging.info("Second roll validation passed, proceeding with dice roll")

        # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞
        await callback.message.edit_reply_markup(reply_markup=None)
        
        dice_msg = await callback.message.answer_dice(emoji="üé≤")
        second_roll = dice_msg.dice.value
        logging.info(f"Second roll value: {second_roll}")
        
        # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É–±–∏–∫–∞
        await asyncio.sleep(4)
        
        first_roll = data['first_roll']
        logging.info(f"First roll was: {first_roll}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö
        response_card = db.get_card(data['response_card_id'])
        offered_card = db.get_card(data['offered_card_id'])
        
        if not response_card or not offered_card:
            logging.error(f"Failed to get cards. Response card ID: {data['response_card_id']}, Offered card ID: {data['offered_card_id']}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö")
            await state.clear()
            return

        logging.info(f"Processing game result. First roll: {first_roll}, Second roll: {second_roll}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if first_roll > second_roll:
            winner_id = data['first_player_id']
            loser_id = data['second_player_id']
            winner_roll = first_roll
            loser_roll = second_roll
        elif second_roll > first_roll:
            winner_id = data['second_player_id']
            loser_id = data['first_player_id']
            winner_roll = second_roll
            loser_roll = first_roll
        else:
            logging.info("Game ended in a draw")
            result_message = (
                f"üé≤ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–ü–µ—Ä–≤—ã–π –±—Ä–æ—Å–æ–∫: {first_roll}\n"
                f"–í—Ç–æ—Ä–æ–π –±—Ä–æ—Å–æ–∫: {second_roll}\n\n"
                f"ü§ù –ù–∏—á—å—è! –ö–∞—Ä—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è —É —Å–≤–æ–∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤."
            )
            
            await callback.message.answer(result_message)
            await callback.bot.send_message(
                chat_id=data['first_player_id'],
                text=result_message
            )
            await state.clear()
            return

        logging.info(f"Winner determined: {winner_id}")
        winner_username = (await callback.bot.get_chat(winner_id)).username or str(winner_id)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        try:
            if winner_id == data['first_player_id']:
                logging.info("Transferring response card to first player")
                # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É —É –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (loser_id - –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫)
                if not db.remove_card_from_user(loser_id, response_card[0]):
                    logging.warning(f"Failed to remove card {response_card[0]} from loser {loser_id}")
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é (winner_id - –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫)
                if not db.add_card_to_user(winner_id, response_card[0]):
                     logging.warning(f"Failed to add card {response_card[0]} to winner {winner_id}")
            else: # winner_id == data['second_player_id']
                logging.info("Transferring offered card to second player")
                 # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É —É –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (loser_id - –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫)
                if not db.remove_card_from_user(loser_id, offered_card[0]):
                     logging.warning(f"Failed to remove card {offered_card[0]} from loser {loser_id}")
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é (winner_id - –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫)
                if not db.add_card_to_user(winner_id, offered_card[0]):
                     logging.warning(f"Failed to add card {offered_card[0]} to winner {winner_id}")
                     
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logging.info(f"Recording stats: Winner={winner_id}, Loser={loser_id}")
            db.add_dice_win(winner_id)
            db.add_dice_loss(loser_id)
            
        except Exception as e:
            logging.error(f"Error transferring cards or recording stats: {e}")
            logging.error("Full error details:", exc_info=True)
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∫–∞—Ä—Ç –∏–ª–∏ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            await state.clear()
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            other_player_id = data['first_player_id'] if callback.from_user.id == data['second_player_id'] else data['second_player_id']
            try:
                target_key = StorageKey(bot_id=callback.bot.id, chat_id=other_player_id, user_id=other_player_id)
                await dp.storage.set_state(key=target_key, state=None)
                await dp.storage.set_data(key=target_key, data={})
            except Exception as clear_error:
                logging.error(f"Error clearing other player state during error handling: {clear_error}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_message = (
            f"üé≤ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–ü–µ—Ä–≤—ã–π –±—Ä–æ—Å–æ–∫: {first_roll}\n"
            f"–í—Ç–æ—Ä–æ–π –±—Ä–æ—Å–æ–∫: {second_roll}\n\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner_username}\n"
            f"–í—ã–∏–≥—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: {offered_card[1] if winner_id == data['second_player_id'] else response_card[1]}"
        )
        
        logging.info("Sending final results to players")
        await callback.message.answer(result_message)
        await callback.bot.send_message(
            chat_id=data['first_player_id'],
            text=result_message
        )
        
        await state.clear()
        logging.info("Game completed successfully")
        
    except Exception as e:
        logging.error(f"Error in handle_second_roll: {e}")
        logging.error("Full error details:", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–æ—Å–∫–∞")
        await state.clear()

async def cancel_dice(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
    logging.info(f"Dice game cancelled by user {callback.from_user.id}")
    await state.clear()
    try:
        await callback.message.delete()
        logging.info(f"Deleted dice message {callback.message.message_id} for user {callback.from_user.id}")
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logging.warning(f"Could not delete dice message {callback.message.message_id}: {e}")
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        try:
            await callback.message.edit_text("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as edit_e:
             logging.warning(f"Could not edit dice message {callback.message.message_id} after delete failed: {edit_e}")
    await callback.answer() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 