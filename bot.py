from aiogram import types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import asyncio
import logging
from config import TOKEN
from database import Database
from components.states import AddCard, AdminStates, CollectionStates, TradeStates, DiceStates, FamilyStates
from components.admin import *
from components.collection import show_collection_card, handle_collection_navigation
from components.cards import get_card, start_notification_checker
from components.trade import *
from components.dice import *
from components.shop import *
from components.profile import show_profile
import datetime
import random
import sqlite3
from dispatcher import dp, bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from components.family import show_family_info
from components.leaders import show_leaderboard
from components.random_card import start_random_card, handle_random_card_roll
from components.dice import (
    handle_dice_navigation, handle_dice_card_selection,
    handle_dice_username_input, handle_dice_response,
    handle_dice_response_card_selection, handle_first_roll,
    handle_second_roll, cancel_dice
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database('film_bot.db')

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard():
    keyboard = [
        [
            KeyboardButton(text="üì∏ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É"),
            KeyboardButton(text="üé¨ –ú–æ–π —Ñ–∏–ª—å–º—Å—Ç—Ä–∏–ø")
        ],
        [KeyboardButton(text="‚ò∞ –ú–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="‚ò∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

# –°–æ–∑–¥–∞–Ω–∏–µ inline-–º–µ–Ω—é
def get_inline_menu():
    keyboard = [
        [
            InlineKeyboardButton(text="üëë Leaders", callback_data="leaders"),
            InlineKeyboardButton(text="ü™™ Profile", callback_data="profile")
        ],
        [
            InlineKeyboardButton(text="üéûÔ∏è House", callback_data="house"),
            InlineKeyboardButton(text="üé¨ Movie Shop", callback_data="movie_shop")
        ],
        [
            InlineKeyboardButton(text="üé≠ Trade", callback_data="trade"),
            InlineKeyboardButton(text="üé´ Film Pass", callback_data="film_pass")
        ],
        [
            InlineKeyboardButton(text="üé≤ Dice", callback_data="dice"),
            InlineKeyboardButton(text="üé∞ Casino üé∞", callback_data="casino")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_user(message.from_user.id)
    # –û–±–Ω–æ–≤–ª—è–µ–º username
    if message.from_user.username:
        db.update_username(message.from_user.id, message.from_user.username)
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_keyboard()
    )

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if db.is_admin(message.from_user.id):
        await message.answer(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@dp.message(Command("recreate_db"))
async def cmd_recreate_db(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recreate_db"""
    if db.is_admin(message.from_user.id):
        await message.answer("–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db.recreate_database()
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@dp.message()
async def handle_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    logging.info(f"Received message: {message.text}, current state: {current_state}")
    
    if current_state == TradeStates.waiting_for_username:
        await handle_username_input(message, state)
        return
    elif current_state == DiceStates.waiting_for_username:
        await handle_dice_username_input(message, state)
        return
    elif current_state == AdminStates.waiting_for_pass_user_id:
        await process_pass_user_id(message, state)
        return
    elif current_state == AdminStates.waiting_for_pass_months:
        await process_pass_months(message, state)
        return
    elif current_state == AdminStates.waiting_for_donate_user_id:
        await process_donate_user_id(message, state)
        return
    elif current_state == AdminStates.waiting_for_donate_amount:
        await process_donate_amount(message, state)
        return
    elif current_state == FamilyStates.waiting_for_name:
        await process_family_name(message, state)
        return
    elif current_state == FamilyStates.waiting_for_avatar:
        await process_family_avatar(message, state)
        return
    elif current_state == FamilyStates.waiting_for_description:
        await process_family_description(message, state)
        return
    elif current_state == FamilyStates.waiting_for_invite_username:
        await process_invite_username(message, state)
        return
    elif current_state == AddCard.waiting_for_name:
        await process_name(message, state)
        return
    elif current_state == AddCard.waiting_for_photo:
        await process_photo(message, state)
        return
    elif current_state == AddCard.waiting_for_limited:
        await process_limited(message, state)
        return
    elif current_state == AddCard.waiting_for_rare:
        await process_rare(message, state)
        return
    elif current_state == AddCard.waiting_for_points:
        await process_points(message, state)
        return
    elif current_state == AddCard.waiting_for_price:
        await process_price(message, state)
        return
    elif current_state == AddCard.waiting_for_counts:
        await process_counts(message, state)
        return
    elif current_state == AdminStates.waiting_for_user_id:
        await process_user_id_for_attempts(message, state)
        return
    elif current_state == AdminStates.waiting_for_attempts:
        await process_attempts_count(message, state)
        return
    elif current_state == AdminStates.waiting_for_ban_user_id:
        await process_ban_user_id(message, state)
        return
    elif current_state == AdminStates.waiting_for_unban_user_id:
        await process_unban_user_id(message, state)
        return
    
    if message.text == "üì∏ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É":
        await get_card(message)
    elif message.text == "üé¨ –ú–æ–π —Ñ–∏–ª—å–º—Å—Ç—Ä–∏–ø":
        user = db.get_user(message.from_user.id)
        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        cards = db.get_user_cards(message.from_user.id)
        if not cards:
            await message.answer("–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞")
            return

        await state.set_state(CollectionStates.viewing)
        await state.update_data(
            cards=cards,
            current_index=0,
            current_rarity=None
        )

        await show_collection_card(message, state)
    elif message.text == "‚ò∞ –ú–µ–Ω—é":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
            reply_markup=get_inline_menu()
        )
    elif message.text.isdigit() and db.is_admin(message.from_user.id):
        # –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –ø–æ ID
        card = db.get_card(int(message.text))
        if card:
            card_info = (
                f"ID: {card[0]}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {card[1]}\n"
                f"–†–µ–¥–∫–æ—Å—Ç—å: {card[4]}\n"
                f"–û—á–∫–∏: {card[5]}\n"
                f"–¶–µ–Ω–∞: {card[6]}\n"
                f"Counts: {card[7]}\n"
                f"{'üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è' if card[3] else 'üîì –û–±—ã—á–Ω–∞—è'}"
            )
            await message.answer_photo(
                photo=card[2],
                caption=card_info
            )
        else:
            await message.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π
@dp.callback_query(lambda c: c.data == "add_card")
async def add_card_callback(callback: types.CallbackQuery, state: FSMContext):
    await process_add_card(callback, state)

@dp.callback_query(lambda c: c.data == "list_cards")
async def list_cards_callback(callback: types.CallbackQuery):
    await process_list_cards(callback)

@dp.callback_query(lambda c: c.data == "find_card")
async def find_card_callback(callback: types.CallbackQuery):
    await process_find_card(callback)

@dp.callback_query(lambda c: c.data == "add_attempts")
async def add_attempts_callback(callback: types.CallbackQuery, state: FSMContext):
    await process_add_attempts(callback, state)

@dp.callback_query(lambda c: c.data == "ban_user")
async def ban_user_callback(callback: types.CallbackQuery, state: FSMContext):
    await process_ban_user(callback, state)

@dp.callback_query(lambda c: c.data == "unban_user")
async def unban_user_callback(callback: types.CallbackQuery, state: FSMContext):
    await process_unban_user(callback, state)


@dp.callback_query(lambda c: c.data.startswith('confirm_trade_'))
async def confirm_trade_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_trade_confirmation(callback, state)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
@dp.callback_query(lambda c: c.data in ["prev_card", "next_card", "sort_cards", "page_info"])
async def collection_navigation(callback: types.CallbackQuery, state: FSMContext):
    await handle_collection_navigation(callback, state)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
@dp.callback_query(lambda c: c.data.startswith("shop_"))
async def shop_purchase_callback(callback: types.CallbackQuery):
    await handle_shop_purchase(callback)

@dp.callback_query(lambda c: c.data == "profile")
async def profile_callback(callback: types.CallbackQuery):
    await show_profile(callback)

@dp.callback_query(lambda c: c.data == "leaders")
async def leaders_callback(callback: types.CallbackQuery):
    await show_leaderboard(callback, bot)

@dp.callback_query(lambda c: c.data == "trade")
async def trade_callback(callback: types.CallbackQuery, state: FSMContext):
    await start_trade(callback, state)

@dp.callback_query(lambda c: c.data.startswith("trade_select_"))
async def trade_select_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_card_selection(callback, state)

@dp.callback_query(lambda c: c.data in ["trade_prev", "trade_next", "trade_info"])
async def trade_navigation_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_trade_navigation(callback, state)

@dp.callback_query(lambda c: c.data.startswith(("accept_trade_", "reject_trade_")))
async def trade_response_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_trade_response(callback, state)

@dp.callback_query(lambda c: c.data.startswith("respond_select_"))
async def respond_select_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_response_card_selection(callback, state)

@dp.callback_query(lambda c: c.data == "cancel_trade")
async def cancel_trade_callback(callback: types.CallbackQuery, state: FSMContext):
    await cancel_trade(callback, state)

@dp.callback_query(lambda c: c.data.startswith(("confirm_trade_", "reject_trade_")))
async def trade_confirmation_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_trade_confirmation(callback, state)

@dp.callback_query(lambda c: c.data == "film_pass")
async def film_pass_callback(callback: types.CallbackQuery):
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if db.has_active_pass(callback.from_user.id):
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∞—Å—Å
        keyboard = [
            [InlineKeyboardButton(text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data="roll_dice")],
            [InlineKeyboardButton(text="üé∞ –ü–æ–ª—É—á–∏—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –∫–∞—Ä—Ç—É", callback_data="get_legendary_card")]
        ]
        await callback.message.answer(
            "üé´ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω—ã–π Film Pass!\n\n"
            "–í–∞—à–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ\n"
            "‚Ä¢ 2 —á–∞—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ üé≤ –ö—É–±–∏–∫ –º–æ–∂–Ω–æ –∫–∏–¥–∞—Ç—å 2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü\n"
            "‚Ä¢ üé∞ –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–æ–ª—É—á–∞–µ—Ç–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –∫–∞—Ä—Ç—É\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é üéûÔ∏è–ì–∏–ª—å–¥–∏—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–∞—Å—Å–∞
        keyboard = [
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å Pass", callback_data="buy_pass")]
        ]
        await callback.message.answer(
            "üìπüí≠ –†–µ–∂–∏—Å—Å–µ—Ä, –¥–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ üé´ Film Pass. Film Pass - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –∏–≥—Ä–µ, –≤–æ—Ç –µ–≥–æ –ø–ª—é—Å—ã:\n\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ\n"
            "‚Ä¢ 2 —á–∞—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ üé≤ –ö—É–±–∏–∫ –º–æ–∂–Ω–æ –∫–∏–¥–∞—Ç—å 2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü\n"
            "‚Ä¢ üé∞ –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–æ–ª—É—á–∞–µ—Ç–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –∫–∞—Ä—Ç—É\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é üéûÔ∏è–ì–∏–ª—å–¥–∏—é\n\n"
            "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ Film Pass, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

@dp.callback_query(lambda c: c.data == "buy_pass")
async def buy_pass_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç—å Pass'"""
    target_username = "SkyBro2"
    message_text = (
        f"–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è üé´ Film Pass, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: "
        f"[@{target_username}](https://t.me/{target_username})"
    )
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        await callback.message.answer(
            message_text,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
        await callback.answer()
    except Exception as e:
        logging.error(f"Error in buy_pass_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

@dp.callback_query(lambda c: c.data == "get_legendary_card")
async def get_legendary_card_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if not db.has_active_pass(callback.from_user.id):
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Film Pass")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–æ–¥–Ω—è 15-–º —á–∏—Å–ª–æ–º
    if current_date.day != 15:
        await callback.message.answer(
            "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –∫–∞—Ä—Ç—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ 15-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.\n"
            f"–°–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç {current_date.replace(day=15).strftime('%d.%m.%Y')}"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –∫–∞—Ä—Ç—É
    card = db.get_random_card_by_rarity("Legendary")
    if not card:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if db.add_card_to_user(callback.from_user.id, card[0]):
        await callback.message.answer_photo(
            photo=card[2],
            caption=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –∫–∞—Ä—Ç—É:\n\n"
                   f"–ù–∞–∑–≤–∞–Ω–∏–µ: {card[1]}\n"
                   f"–†–µ–¥–∫–æ—Å—Ç—å: {card[4]}\n"
                   f"–û—á–∫–∏: {card[5]}"
        )
    else:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã")

@dp.callback_query(lambda c: c.data == "dice")
async def dice_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cards = db.get_user_cards(callback.from_user.id)
    if not cards:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É
    await state.set_state(DiceStates.selecting_card)
    await state.update_data(current_index=0)
    await show_card_for_dice(callback.message, callback.from_user.id, 0)

@dp.callback_query(lambda c: c.data == "roll_dice")
async def roll_dice_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫"""
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if not db.has_active_pass(callback.from_user.id):
        await callback.message.answer("–î–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è Film Pass")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü
    rolls_count = db.get_dice_rolls_count(callback.from_user.id)
    logging.info(f"Current dice rolls count for user {callback.from_user.id}: {rolls_count}")
    
    if rolls_count >= 2:
        await callback.message.answer(
            "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ 2 –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.\n"
            "–°–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ."
        )
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6
    dice_result = random.randint(1, 6)
    logging.info(f"Dice result for user {callback.from_user.id}: {dice_result}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
    await callback.message.answer_dice(emoji="üé≤")
    
    # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    await asyncio.sleep(2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    attempts_to_add = dice_result
    db.add_attempts(callback.from_user.id, attempts_to_add)
    logging.info(f"Added {attempts_to_add} attempts to user {callback.from_user.id}")
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±—Ä–æ—Å–∫–æ–≤
    if not db.increment_dice_rolls(callback.from_user.id):
        logging.error(f"Failed to increment dice rolls for user {callback.from_user.id}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –±—Ä–æ—Å–∫–æ–≤")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    remaining_rolls = 2 - (rolls_count + 1)
    await callback.message.answer(
        f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {dice_result}\n"
        f"üéâ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {attempts_to_add} –ø–æ–ø—ã—Ç–æ–∫!\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –±—Ä–æ—Å–∫–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {remaining_rolls}"
    )

@dp.callback_query(lambda c: c.data == "casino")
async def casino_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–∞–∑–∏–Ω–æ"""
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ–Ω–∞—Ç–∞
    donate_balance = db.get_user_donate(callback.from_user.id)
    
    keyboard = [
        [
            InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="casino_basketball"),
            InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="casino_football")
        ],
        [
            InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç—ã", callback_data="casino_slots")
        ]
    ]
    
    await callback.message.answer(
        f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–æ–Ω–∞—Ç–∞: {donate_balance}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n"
        "‚Ä¢ üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - 25 –¥–æ–Ω–∞—Ç\n"
        "‚Ä¢ ‚öΩ –§—É—Ç–±–æ–ª - 25 –¥–æ–Ω–∞—Ç\n"
        "‚Ä¢ üé∞ –°–ª–æ—Ç—ã - 25 –¥–æ–Ω–∞—Ç\n\n"
        "–ü—Ä–∏–∑ –∑–∞ –ø–æ–±–µ–¥—É: 10 –ø–æ–ø—ã—Ç–æ–∫!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(lambda c: c.data == "casino_basketball")
async def casino_basketball_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª"""
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ–Ω–∞—Ç–∞
    donate_balance = db.get_user_donate(callback.from_user.id)
    if donate_balance < 25:
        await callback.message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–Ω–∞—Ç–∞!\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {donate_balance}\n"
            "–¢—Ä–µ–±—É–µ—Ç—Å—è: 25"
        )
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–Ω–∞—Ç
    if not db.remove_donate(callback.from_user.id, 25):
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–Ω–∞—Ç–∞")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –±–∞—Å–∫–µ—Ç–±–æ–ª–∞
    dice_msg = await callback.message.answer_dice(emoji="üèÄ")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await asyncio.sleep(4)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = dice_msg.dice.value
    if result in [4, 5]:
        db.add_attempts(callback.from_user.id, 10)
        await callback.message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n"
            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –ø–æ–ø—ã—Ç–æ–∫!"
        )
    else:
        await callback.message.answer(
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
        )

@dp.callback_query(lambda c: c.data == "casino_football")
async def casino_football_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –≤ —Ñ—É—Ç–±–æ–ª"""
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ–Ω–∞—Ç–∞
    donate_balance = db.get_user_donate(callback.from_user.id)
    if donate_balance < 25:
        await callback.message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–Ω–∞—Ç–∞!\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {donate_balance}\n"
            "–¢—Ä–µ–±—É–µ—Ç—Å—è: 25"
        )
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–Ω–∞—Ç
    if not db.remove_donate(callback.from_user.id, 25):
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–Ω–∞—Ç–∞")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ—É—Ç–±–æ–ª–∞
    dice_msg = await callback.message.answer_dice(emoji="‚öΩ")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await asyncio.sleep(4)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = dice_msg.dice.value
    if result in [4, 5]:
        db.add_attempts(callback.from_user.id, 10)
        await callback.message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–±–∏–ª–∏ –≥–æ–ª!\n"
            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –ø–æ–ø—ã—Ç–æ–∫!"
        )
    else:
        await callback.message.answer(
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –∑–∞–±–∏–ª–∏ –≥–æ–ª.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
        )

@dp.callback_query(lambda c: c.data == "casino_slots")
async def casino_slots_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã"""
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ–Ω–∞—Ç–∞
    donate_balance = db.get_user_donate(callback.from_user.id)
    if donate_balance < 25:
        await callback.message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–Ω–∞—Ç–∞!\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {donate_balance}\n"
            "–¢—Ä–µ–±—É–µ—Ç—Å—è: 25"
        )
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–Ω–∞—Ç
    if not db.remove_donate(callback.from_user.id, 25):
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–Ω–∞—Ç–∞")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–ª–æ—Ç–æ–≤
    dice_msg = await callback.message.answer_dice(emoji="üé∞")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await asyncio.sleep(4)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = dice_msg.dice.value
    if result == 64:
        db.add_attempts(callback.from_user.id, 10)
        await callback.message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –î–∂–µ–∫–ø–æ—Ç!\n"
            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –ø–æ–ø—ã—Ç–æ–∫!"
        )
    else:
        await callback.message.answer(
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–≤–µ–∑–ª–æ.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
        )
@dp.message(lambda m: m.dice is not None)
async def handle_dice_result(message: types.Message, state: FSMContext):
    result = message.dice.value
    emoji = message.dice.emoji

    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã: —ç–º–æ–¥–∑–∏={emoji}, –∑–Ω–∞—á–µ–Ω–∏–µ={result}")

    # –î–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª–∞ (üèÄ) - –ø–æ–±–µ–¥–∞ –ø—Ä–∏ 4 –∏–ª–∏ 5
    if emoji == "üèÄ":
        if result in [4, 5]:
            db.add_attempts(message.from_user.id, 10)
            await message.answer(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n"
                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –ø–æ–ø—ã—Ç–æ–∫!"
            )
        else:
            await message.answer(
                f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            )

    # –î–ª—è —Ñ—É—Ç–±–æ–ª–∞ (‚öΩ) - –ø–æ–±–µ–¥–∞ –ø—Ä–∏ 4 –∏–ª–∏ 5
    elif emoji == "‚öΩ":
        if result in [4, 5]:
            db.add_attempts(message.from_user.id, 10)
            await message.answer(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–±–∏–ª–∏ –≥–æ–ª!\n"
                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –ø–æ–ø—ã—Ç–æ–∫!"
            )
        else:
            await message.answer(
                f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –∑–∞–±–∏–ª–∏ –≥–æ–ª.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            )

    # –î–ª—è —Å–ª–æ—Ç–æ–≤ (üé∞) - –ø–æ–±–µ–¥–∞ –ø—Ä–∏ 64
    elif emoji == "üé∞":
        if result == 64:
            db.add_attempts(message.from_user.id, 10)
            await message.answer(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –î–∂–µ–∫–ø–æ—Ç!\n"
                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –ø–æ–ø—ã—Ç–æ–∫!"
            )
        else:
            await message.answer(
                f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–≤–µ–∑–ª–æ.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            )

@dp.callback_query(lambda c: c.data == "roll_random_card")
async def roll_random_card_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    await handle_random_card_roll(callback, state)

@dp.callback_query(lambda c: c.data in ["dice_prev", "dice_next", "dice_info"])
async def dice_navigation_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_dice_navigation(callback, state)

@dp.callback_query(lambda c: c.data.startswith("dice_select_"))
async def dice_select_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_dice_card_selection(callback, state)

@dp.callback_query(lambda c: c.data.startswith(("accept_dice_", "reject_dice_")))
async def dice_response_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_dice_response(callback, state)

@dp.callback_query(lambda c: c.data.startswith("respond_dice_"))
async def respond_dice_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_dice_response_card_selection(callback, state)

@dp.callback_query(lambda c: c.data.startswith("roll_dice_first_"))
async def roll_dice_first_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_first_roll(callback, state)

@dp.callback_query(lambda c: c.data.startswith("roll_dice_second_"))
async def roll_dice_second_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_second_roll(callback, state)

@dp.callback_query(lambda c: c.data == "cancel_dice")
async def cancel_dice_callback(callback: types.CallbackQuery, state: FSMContext):
    await cancel_dice(callback, state)

@dp.callback_query(lambda c: c.data == "house")
async def house_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ House"""
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–µ–º—å—è
    if user[5] and user[5].strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ family –Ω–µ –ø—É—Å—Ç–æ–µ
        family = db.get_family(user[5])
        if family:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º —Å–µ–º—å–∏
            members = db.get_family_members(family[1])
            is_member = any(member[0] == callback.from_user.id for member in members)
            
            if is_member:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏—Ö —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –æ—á–∫–∞–º–∏
                members_text = []
                for member in members:
                    if member[1]:  # –µ—Å–ª–∏ –µ—Å—Ç—å username
                        season_points = db.get_user_season_points(member[0])
                        members_text.append(f"@{member[1]} üèÜ {season_points}")
                
                members_text = "\n".join(members_text)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤—ã —Å–µ–º—å–∏
                keyboard = []
                if family[0] == callback.from_user.id:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≥–ª–∞–≤–∞ —Å–µ–º—å–∏
                    keyboard = [
                        [InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data="invite_member")],
                        [InlineKeyboardButton(text="‚ùå –ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="kick_member")],
                        [InlineKeyboardButton(text="‚ö†Ô∏è –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–µ–º—å—é", callback_data="disband_family")]
                    ]
                
                await callback.message.answer_photo(
                    photo=family[2],  # family[2] - —ç—Ç–æ avatar_url
                    caption=f"üè† –°–µ–º—å—è: {family[1]}\n"
                           f"üëë –ì–ª–∞–≤–∞: @{db.get_user(family[0])[1]}\n\n"
                           f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{members_text}\n\n"
                           f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{family[3]}",  # family[3] - —ç—Ç–æ description
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
                return
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º —Å–µ–º—å–∏, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ family
                db.update_user_field(callback.from_user.id, 'family', '')
                logging.info(f"Cleared family field for user {callback.from_user.id} as they are not a member")

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–µ–º—å–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º Film Pass
    if not db.has_active_pass(callback.from_user.id):
        await callback.message.answer(
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è Film Pass.\n"
            "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Å–µ–º—å—é!"
        )
        return

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–µ–º—å–∏, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π Film Pass, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
    keyboard = [
        [InlineKeyboardButton(text="üè† –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", callback_data="create_family")]
    ]
    await callback.message.answer(
        "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–µ–º—å–∏. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(lambda c: c.data == "create_family")
async def create_family_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏"""
    await state.set_state(FamilyStates.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Å–µ–º—å–∏:")

@dp.message(FamilyStates.waiting_for_name)
async def process_family_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–º—å–∏"""
    logging.info("=== Processing family name ===")
    logging.info(f"Message text: {message.text}")
    logging.info(f"Current state: {await state.get_state()}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏
        await state.update_data(family_name=message.text)
        logging.info("Family name saved to state")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(FamilyStates.waiting_for_avatar)
        logging.info("State changed to waiting_for_avatar")
        
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è –≤–∞—à–µ–π —Å–µ–º—å–∏ (—Ñ–æ—Ç–æ):")
        logging.info("Sent request for family avatar")
    except Exception as e:
        logging.error(f"Error in process_family_name: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()

@dp.message(FamilyStates.waiting_for_avatar)
async def process_family_avatar(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–µ–º—å–∏"""
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–µ–º—å–∏")
        return
        
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    await state.update_data(family_avatar=photo.file_id)
    await state.set_state(FamilyStates.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Å–µ–º—å–∏:")

@dp.message(FamilyStates.waiting_for_description)
async def process_family_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ–º—å–∏"""
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–º—å—é
    if db.create_family(
        message.from_user.id,
        data['family_name'],
        data['family_avatar'],
        message.text
    ):
        await message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–∑–¥–∞–ª–∏ —Å–µ–º—å—é '{data['family_name']}'!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

@dp.callback_query(lambda c: c.data == "invite_member")
async def invite_member_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user = db.get_user(callback.from_user.id)
    if not user or not user[5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–º—å–∏
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏")
        return
    
    family = db.get_family(user[5])
    if not family or family[0] != callback.from_user.id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º
        await callback.message.answer("–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä —Å–µ–º—å–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    await state.set_state(FamilyStates.waiting_for_invite_username)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å (–±–µ–∑ @):")

@dp.message(FamilyStates.waiting_for_invite_username)
async def process_invite_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ username –ø—Ä–∏–≥–ª–∞—à–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logging.info(f"Processing invite username: {message.text}")
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ username
    username = message.text.lstrip('@')
    logging.info(f"Cleaned username: {username}")
    
    user = db.get_user_by_username(username)
    if not user:
        logging.info(f"User not found: {username}")
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    logging.info(f"Found user: {user}")
    
    if user[5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
        logging.info(f"User already in family: {user[5]}")
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–µ–º—å–µ")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å–µ–º—å–µ
    current_user = db.get_user(message.from_user.id)
    family_name = current_user[5]
    family = db.get_family(family_name)
    logging.info(f"Current user family: {family_name}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_invite_{family_name}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_invite_{family_name}")
        ]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_photo(
            chat_id=user[0],
            photo=family[2],  # avatar_url
            caption=f"üéâ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ —Å–µ–º—å—é '{family_name}'\n\n"
                   f"üëë –ì–ª–∞–≤–∞: @{db.get_user(family[0])[1]}\n"
                   f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{family[3]}\n\n"
                   f"–•–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await message.answer(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
    except Exception as e:
        logging.error(f"Error sending invite: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith(("accept_invite_", "reject_invite_")))
async def handle_invite_response(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º—å—é"""
    logging.info(f"Processing invite response: {callback.data}")
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    parts = callback.data.split("_")
    action = parts[0]  # accept –∏–ª–∏ reject
    family_name = "_".join(parts[2:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –¥–ª—è –∏–º–µ–Ω–∏ —Å–µ–º—å–∏
    
    logging.info(f"Action: {action}, Family name: {family_name}")
    
    if action == "accept":
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é
        if db.add_family_member(family_name, callback.from_user.id):
            family = db.get_family(family_name)
            await callback.message.edit_caption(
                caption=f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ–º—å–µ '{family_name}'!"
            )
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–∞–≤—É —Å–µ–º—å–∏
            try:
                await bot.send_message(
                    chat_id=family[0],
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º—å—é!"
                )
            except Exception as e:
                logging.error(f"Error notifying family leader: {e}")
        else:
            await callback.message.edit_caption(
                caption="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–µ–º—å–µ"
            )
    else:  # reject
        await callback.message.edit_caption(
            caption="‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º—å—é"
        )

@dp.callback_query(lambda c: c.data == "add_pass")
async def add_pass_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Film Pass"""
    logging.info("Add pass button clicked")
    if not db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    await callback.answer()
    await process_add_pass(callback, state)

@dp.callback_query(lambda c: c.data == "kick_member")
async def kick_member_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user = db.get_user(callback.from_user.id)
    if not user or not user[5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–º—å–∏
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏")
        return
    
    family = db.get_family(user[5])
    if not family or family[0] != callback.from_user.id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º
        await callback.message.answer("–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä —Å–µ–º—å–∏ –º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    members = db.get_family_members(family[1])
    if not members:
        await callback.message.answer("–í —Å–µ–º—å–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    keyboard = []
    for member in members:
        if member[0] != callback.from_user.id:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–¥–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ
            keyboard.append([InlineKeyboardButton(
                text=f"@{member[1]}",
                callback_data=f"kick_{member[0]}"
            )])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_kick")])
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(lambda c: c.data.startswith("kick_"))
async def process_kick_member(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user_id = int(callback.data.split("_")[1])
    user = db.get_user(callback.from_user.id)
    family = db.get_family(user[5])
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ–º—å–∏
    if db.remove_family_member(family[1], user_id):
        await callback.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å–µ–º—å–∏")
    else:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ
    await house_callback(callback, state)

@dp.callback_query(lambda c: c.data == "disband_family")
async def disband_family_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–º—å–∏"""
    user = db.get_user(callback.from_user.id)
    if not user or not user[5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–º—å–∏
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏")
        return
    
    family = db.get_family(user[5])
    if not family or family[0] != callback.from_user.id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º
        await callback.message.answer("–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä —Å–µ–º—å–∏ –º–æ–∂–µ—Ç —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–µ–º—å—é")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_disband"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_disband")
        ]
    ]
    
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–µ–º—å—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(lambda c: c.data == "confirm_disband")
async def confirm_disband_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–º—å–∏"""
    user = db.get_user(callback.from_user.id)
    family = db.get_family(user[5])
    
    if db.disband_family(family[1]):
        await callback.message.answer("–°–µ–º—å—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
    else:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ–º—å–∏")

@dp.callback_query(lambda c: c.data in ["cancel_kick", "cancel_disband"])
async def cancel_action_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–ø.)"""
    logging.info(f"Action cancelled by user {callback.from_user.id}. Callback data: {callback.data}")
    await state.clear()
    try:
        await callback.message.delete()
        logging.info(f"Deleted action message {callback.message.message_id}")
    except Exception as e:
        logging.warning(f"Could not delete action message {callback.message.message_id}: {e}")
        try:
            # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Ö–æ—Ç—è –±—ã —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        except Exception as edit_e:
            logging.warning(f"Could not edit action message {callback.message.message_id}: {edit_e}")
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é –¥–æ–º–∞:
    # from components.house import house_callback # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
    # await house_callback(callback) # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ callback, —Ç–∞–∫ –∫–∞–∫ state –æ—á–∏—â–µ–Ω

@dp.callback_query(lambda c: c.data == "add_donate")
async def add_donate_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–¥–∞—á–∏ –¥–æ–Ω–∞—Ç–∞"""
    await process_add_donate(callback, state)

@dp.callback_query(lambda c: c.data.startswith("rarity_"))
async def handle_rarity_sort(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞—Ä—Ç –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    rarity = callback.data.replace("rarity_", "")
    user_id = callback.from_user.id
    
    if rarity == "all":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cards = db.get_user_cards(user_id)
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
        cards = db.get_user_cards_by_rarity(user_id, rarity)
    
    if not cards:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç{'.' if rarity == 'all' else f' —Ä–µ–¥–∫–æ—Å—Ç–∏ {rarity}.'}", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—ã –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(cards=cards, current_index=0, current_rarity=rarity)
    await state.set_state(CollectionStates.viewing)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É
    await show_collection_card(callback.message, state)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("confirm_dice_start_"))
async def handle_dice_game_confirmation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º"""
    try:
        logging.info("=== DICE GAME CONFIRMATION HANDLER ===")
        data = await state.get_data()
        logging.info(f"Current state data: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['offered_card_id', 'response_card_id', 'target_user_id']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            logging.error(f"Missing required fields: {missing_fields}")
            logging.error(f"Available data: {data}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ä—Ç—ã –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
            response_card_id = int(callback.data.split('_')[3])
            logging.info(f"Extracting response card ID from callback: {response_card_id}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if 'response_card_id' in missing_fields:
                logging.info(f"Restoring missing response_card_id from callback: {response_card_id}")
                await state.update_data(response_card_id=response_card_id)
                data['response_card_id'] = response_card_id
                missing_fields.remove('response_card_id')
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è, –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
            if missing_fields:
                await callback.message.answer(
                    f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ ({', '.join(missing_fields)})"
                )
                await state.clear()
                return

        response_card_id = int(callback.data.split('_')[3])
        logging.info(f"Response card ID from callback: {response_card_id}")
        logging.info(f"Response card ID from state: {data['response_card_id']}")
        
        # –ï—Å–ª–∏ ID –∫–∞—Ä—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if data['response_card_id'] != response_card_id:
            logging.warning(f"Response card ID mismatch: {response_card_id} != {data['response_card_id']}")
            logging.info("Updating response_card_id in state data")
            data['response_card_id'] = response_card_id
            await state.update_data(response_card_id=response_card_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö
        response_card = db.get_card(data['response_card_id'])
        offered_card = db.get_card(data['offered_card_id'])

        if not response_card or not offered_card:
            logging.error("Failed to get card info")
            logging.error(f"Response card ID: {data['response_card_id']}")
            logging.error(f"Offered card ID: {data['offered_card_id']}")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        game_message = (
            "üé≤ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n"
            f"–ö–∞—Ä—Ç—ã –≤ –∏–≥—Ä–µ:\n"
            f"1. {offered_card[1]} ({offered_card[4]})\n"
            f"2. {response_card[1]} ({response_card[4]})\n\n"
            "–°–µ–π—á–∞—Å –º—ã –ø–æ–¥–±—Ä–æ—Å–∏–º –º–æ–Ω–µ—Ç–∫—É, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –±—É–¥–µ—Ç –±—Ä–æ—Å–∞—Ç—å –∫–æ—Å—Ç–∏ –ø–µ—Ä–≤—ã–º!"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        await callback.message.answer(game_message)
        await callback.bot.send_message(
            chat_id=data['target_user_id'],
            text=game_message
        )

        # –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É (–∞–Ω–∏–º–∞—Ü–∏—è)
        coin_msg = await callback.message.answer_dice(emoji="üéØ")
        coin_value = coin_msg.dice.value

        # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        await asyncio.sleep(4)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–Ω–µ—á–µ—Ç–Ω–æ–µ - –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫, —á–µ—Ç–Ω–æ–µ - –≤—Ç–æ—Ä–æ–π)
        first_player = callback.from_user.id if coin_value % 2 == 1 else data['target_user_id']
        second_player = data['target_user_id'] if first_player == callback.from_user.id else callback.from_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            first_player_id=first_player,
            second_player_id=second_player,
            response_card_id=data['response_card_id'],
            offered_card_id=data['offered_card_id']
        )
        await state.set_state(DiceStates.waiting_for_first_roll)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—Ä–æ—Å–∫–∞
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏",
                    callback_data=f"roll_dice_first_{first_player}"
                )
            ]
        ]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
        first_player_name = (await callback.bot.get_chat(first_player)).username or str(first_player)
        second_player_name = (await callback.bot.get_chat(second_player)).username or str(second_player)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏
        result_message = (
            f"üéØ –ñ—Ä–µ–±–∏–π –±—Ä–æ—à–µ–Ω!\n\n"
            f"–ü–µ—Ä–≤—ã–º –±—Ä–æ—Å–∞–µ—Ç: @{first_player_name}\n"
            f"–í—Ç–æ—Ä—ã–º –±—Ä–æ—Å–∞–µ—Ç: @{second_player_name}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º
        await callback.message.answer(result_message)
        await callback.bot.send_message(
            chat_id=data['target_user_id'],
            text=result_message
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É
        await callback.bot.send_message(
            chat_id=first_player,
            text="–í–∞—à —Ö–æ–¥! –ë—Ä–æ—Å–∞–π—Ç–µ –∫–æ—Å—Ç–∏!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É
        await callback.bot.send_message(
            chat_id=second_player,
            text="–û–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞!"
        )

    except Exception as e:
        logging.error(f"Error in handle_dice_game_confirmation: {e}")
        logging.error("Full error details:", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã")
        await state.clear()
        
@dp.callback_query(lambda c: c.data == "cancel_admin_state")
async def cancel_admin_state_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è)"""
    current_state = await state.get_state()
    logging.info(f"Admin action cancelled by user {callback.from_user.id}. State: {current_state}")
    await state.clear()
    try:
        await callback.message.delete()
        logging.info(f"Deleted admin action message {callback.message.message_id}")
    except Exception as e:
        logging.warning(f"Could not delete admin action message {callback.message.message_id}: {e}")
        try:
            # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        except Exception as edit_e:
            logging.warning(f"Could not edit admin action message {callback.message.message_id}: {edit_e}")
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

async def process_unban_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞"""
    # ... (–∫–æ–¥)
    await state.clear()

@dp.callback_query(lambda c: c.data == "delete_card")
async def delete_card_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    await process_delete_card(callback, state)

@dp.message(AdminStates.waiting_for_delete_card_id)
async def handle_delete_card_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    await process_delete_card_id(message, state)

@dp.callback_query(lambda c: c.data.startswith("confirm_delete_card_"))
async def confirm_delete_card_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    card_id = int(callback.data.split('_')[-1])
    if db.delete_card(card_id):
        await callback.message.answer(f"–ö–∞—Ä—Ç–∞ {card_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    else:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã")
    await state.clear()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        start_notification_checker()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    finally:
        await dp.storage.close()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main()) 